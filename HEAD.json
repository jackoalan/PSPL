{"files":[{"file":"PSPL/PSPL_IR.h","functions":[],"meta":{},"lines":232},{"file":"PSPL/PSPLCommon.h","functions":["pspl_error","pspl_warn","pspl_malloc_context_init","pspl_malloc_context_destroy","pspl_malloc_malloc","pspl_malloc_free","pspl_hash_cmp","pspl_hash_cpy","pspl_hash_fmt","pspl_hash_parse"],"meta":{"brief":"General Toolchain *and* Runtime Public API Bits","defgroup":"pspl Common APIs","ingroup":"PSPL","comments":"\n"},"lines":260},{"file":"PSPL/PSPLRuntimeExtension.h","functions":["pspl_runtime_get_embedded_data_object_from_key","pspl_runtime_count_hash_embedded_data_objects","pspl_runtime_get_embedded_data_object_from_hash","pspl_runtime_enumerate_hash_embedded_data_objects","pspl_runtime_count_integer_embedded_data_objects","pspl_runtime_get_embedded_data_object_from_integer","pspl_runtime_enumerate_integer_embedded_data_objects"],"meta":{"brief":"Runtime extension API","ingroup":"PSPL","comments":"\n"},"lines":208},{"file":"PSPL/PSPLRuntimeThreads.h","functions":[],"meta":{},"lines":52},{"file":"PSPL/PSPLToolchainExtension.h","functions":["pspl_toolchain_provide_copyright","pspl_toolchain_provide_subext","pspl_send_platform_instruction","pspl_toolchain_init_other_extension"],"meta":{"brief":"API for extending the PSPL language","defgroup":"pspl_toolchain API for extending the PSPL language","ingroup":"PSPL","comments":"\n"},"lines":431},{"file":"PSPL/PSPLValue.h","functions":[],"meta":{},"lines":172},{"file":"PSPLExtension.h","functions":[],"meta":{},"lines":21},{"file":"PSPLRuntime.h","functions":["pspl_runtime_init","pspl_runtime_shutdown","pspl_runtime_load_package_file","pspl_runtime_load_package_provider","pspl_runtime_load_package_membuf","pspl_runtime_unload_package","pspl_runtime_count_psplcs","pspl_runtime_enumerate_psplcs","pspl_runtime_get_psplc_from_key","pspl_runtime_get_psplc_from_hash","pspl_runtime_retain_psplc","pspl_runtime_release_psplc","pspl_runtime_bind_psplc","pspl_runtime_count_archived_files","pspl_runtime_enumerate_archived_files","pspl_runtime_get_archived_file_from_hash","pspl_runtime_retain_archived_file","pspl_runtime_release_archived_file","pspl_runtime_access_archived_file"],"meta":{"brief":"Runtime Public API","defgroup":"pspl_runtime Runtime Public API","ingroup":"PSPL","comments":"\n"},"lines":314}],"functions":{"pspl_error":{"type":"function","file":"PSPL/PSPLCommon.h","line":108,"lineto":108,"args":[{"name":"exit_code","type":"int","comment":"Error code to use with `exit`"},{"name":"brief","type":"const char*","comment":"Short string briefly describing error"},{"name":"msg","type":"const char*","comment":"Format string elaborating error details"}],"argline":"int exit_code, const char* brief, const char* msg, ...","sig":"int::const char*::const char*","return":{"type":"void"},"description":"<p>Raise globally-recognised error condition (terminating the entire program)</p>\n","comments":"","group":"PSPL_PSPLCommon"},"pspl_warn":{"type":"function","file":"PSPL/PSPLCommon.h","line":115,"lineto":119,"args":[{"name":"brief","type":"const char*","comment":"Short string briefly describing warning"},{"name":"msg","type":"const char*","comment":"Format string elaborating warning details"}],"argline":"const char* brief, const char* msg, ...","sig":"const char*::const char*","return":{"type":"void"},"description":"<p>Raise globally-recognised warning</p>\n","comments":"","group":"PSPL_PSPLCommon"},"pspl_malloc_context_init":{"type":"function","file":"PSPL/PSPLCommon.h","line":136,"lineto":136,"args":[{"name":"context","type":"pspl_malloc_context_t*","comment":"Context object to populate"}],"argline":"pspl_malloc_context_t* context","sig":"pspl_malloc_context_t*","return":{"type":"void"},"description":"<p>Init Malloc Context for tracking allocated objects</p>\n","comments":"","group":"malloc"},"pspl_malloc_context_destroy":{"type":"function","file":"PSPL/PSPLCommon.h","line":143,"lineto":143,"args":[{"name":"context","type":"pspl_malloc_context_t*","comment":"Context object to destroy"}],"argline":"pspl_malloc_context_t* context","sig":"pspl_malloc_context_t*","return":{"type":"void"},"description":"<p>Destroy Malloc Context and free tracked memory objects with it</p>\n","comments":"","group":"malloc"},"pspl_malloc_malloc":{"type":"function","file":"PSPL/PSPLCommon.h","line":151,"lineto":151,"args":[{"name":"context","type":"pspl_malloc_context_t*","comment":"Context object to add memory object within"},{"name":"size","type":"size_t"}],"argline":"pspl_malloc_context_t* context, size_t size","sig":"pspl_malloc_context_t*::size_t","return":{"type":"void*","comment":"Newly-allocated memory object pointer"},"description":"<p>Allocate memory object and track within context</p>\n","comments":"","group":"malloc"},"pspl_malloc_free":{"type":"function","file":"PSPL/PSPLCommon.h","line":159,"lineto":162,"args":[{"name":"context","type":"pspl_malloc_context_t*","comment":"Context object to free memory object from"},{"name":"ptr","type":"void*","comment":"Previously allocated memory object"}],"argline":"pspl_malloc_context_t* context, void* ptr","sig":"pspl_malloc_context_t*::void*","return":{"type":"void"},"description":"<p>Free memory object from within context</p>\n","comments":"","group":"malloc"},"pspl_hash_cmp":{"type":"function","file":"PSPL/PSPLCommon.h","line":179,"lineto":181,"args":[{"name":"a","type":"const pspl_hash*","comment":"First Hash"},{"name":"b","type":"const pspl_hash*","comment":"Second Hash"}],"argline":"const pspl_hash* a, const pspl_hash* b","sig":"const pspl_hash*::const pspl_hash*","return":{"type":"inline int","comment":"0 if identical, positive or negative otherwise"},"description":"<p>Compare the contents of two hash objects</p>\n","comments":"","group":"hash"},"pspl_hash_cpy":{"type":"function","file":"PSPL/PSPLCommon.h","line":189,"lineto":191,"args":[{"name":"dest","type":"pspl_hash*","comment":"Hash location to copy to"},{"name":"src","type":"const pspl_hash*","comment":"Hash location to copy from"}],"argline":"pspl_hash* dest, const pspl_hash* src","sig":"pspl_hash*::const pspl_hash*","return":{"type":"inline void"},"description":"<p>Copy hash to another location in memory</p>\n","comments":"","group":"hash"},"pspl_hash_fmt":{"type":"function","file":"PSPL/PSPLCommon.h","line":204,"lineto":204,"args":[{"name":"out","type":"char*","comment":"String-buffer to fill (allocated to length of `PSPL_HASH_STRING_LEN`)"},{"name":"hash","type":"const pspl_hash*","comment":"Hash object to be read"}],"argline":"char* out, const pspl_hash* hash","sig":"char*::const pspl_hash*","return":{"type":"void"},"description":"<p>Write hash data as string</p>\n","comments":"","group":"hash"},"pspl_hash_parse":{"type":"function","file":"PSPL/PSPLCommon.h","line":212,"lineto":212,"args":[{"name":"out","type":"pspl_hash*","comment":"String-buffer containing hash as generated by `pspl_hash_fmt`"},{"name":"hash_str","type":"const char*"}],"argline":"pspl_hash* out, const char* hash_str","sig":"pspl_hash*::const char*","return":{"type":"void"},"description":"<p>Parse hash string as hash object</p>\n","comments":"","group":"hash"},"pspl_runtime_get_embedded_data_object_from_key":{"type":"function","file":"PSPL/PSPLRuntimeExtension.h","line":58,"lineto":60,"args":[{"name":"object","type":"const pspl_runtime_psplc_t*","comment":"Read-only handle identifying embedded PSPLC object to get data object from"},{"name":"key","type":"const char*","comment":"Key string to hash and use for data object lookup"},{"name":"data_object_out","type":"pspl_data_object_t*","comment":"Pointer to app-allocated data object structure needing to be populated (composing data ptr and length)"}],"argline":"const pspl_runtime_psplc_t* object,\n                                                   const char* key,\n                                                   pspl_data_object_t* data_object_out","sig":"const pspl_runtime_psplc_t*::const char*::pspl_data_object_t*","return":{"type":"int"},"description":"<p>Get embedded data object for extension by string key (used in hash lookup)</p>\n","comments":"<ul>\n<li><strong>This routine may only be called within extension/platform <code>load</code> hook</strong></li>\n<li>This routine will only lookup objects in <em>hashed namespace</em></li>\n</ul>\n","group":"runtime"},"pspl_runtime_count_hash_embedded_data_objects":{"type":"function","file":"PSPL/PSPLRuntimeExtension.h","line":72,"lineto":72,"args":[{"name":"object","type":"const pspl_runtime_psplc_t*","comment":"Read-only handle identifying embedded PSPLC object to count objects from"}],"argline":"const pspl_runtime_psplc_t* object","sig":"const pspl_runtime_psplc_t*","return":{"type":"int","comment":"Count of hash-keyed objects"},"description":"<p>Count embedded object in PSPLC keyed by hash</p>\n","comments":"<ul>\n<li><strong>This routine may only be called within extension/platform <code>load</code> hook</strong></li>\n<li>This routine will only lookup objects in <em>hashed namespace</em></li>\n</ul>\n","group":"runtime"},"pspl_runtime_get_embedded_data_object_from_hash":{"type":"function","file":"PSPL/PSPLRuntimeExtension.h","line":86,"lineto":90,"args":[{"name":"object","type":"const pspl_runtime_psplc_t*","comment":"Read-only handle identifying embedded PSPLC object to get data object from"},{"name":"key","type":"const pspl_hash*"},{"name":"data_object_out","type":"pspl_data_object_t*","comment":"Pointer to app-allocated data object structure needing to be populated (composing data ptr and length)"}],"argline":"const pspl_runtime_psplc_t* object,\n                                                    const pspl_hash* key,\n                                                    pspl_data_object_t* data_object_out","sig":"const pspl_runtime_psplc_t*::const pspl_hash*::pspl_data_object_t*","return":{"type":"int"},"description":"<p>Get embedded object for extension by direct hash key (skips string hashing)</p>\n","comments":"<ul>\n<li><strong>This routine may only be called within extension/platform <code>load</code> hook</strong></li>\n<li>This routine will only lookup objects in <em>hashed namespace</em></li>\n</ul>\n","group":"runtime"},"pspl_runtime_enumerate_hash_embedded_data_objects":{"type":"function","file":"PSPL/PSPLRuntimeExtension.h","line":102,"lineto":104,"args":[{"name":"object","type":"const pspl_runtime_psplc_t*","comment":"Read-only handle identifying embedded PSPLC object to get data object from"},{"name":"hook","type":"pspl_hash_enumerate_hook","comment":"Function pointer to call for each hash-keyed object. Returning -1 from hook will cancel enumeration."},{"name":"user_ptr","type":"void*"}],"argline":"const pspl_runtime_psplc_t* object,\n                                                       pspl_hash_enumerate_hook hook,\n                                                       void* user_ptr","sig":"const pspl_runtime_psplc_t*::pspl_hash_enumerate_hook::void*","return":{"type":"void"},"description":"<p>Enumerate hashed embedded objects</p>\n","comments":"<ul>\n<li><strong>This routine may only be called within extension/platform <code>load</code> hook</strong></li>\n<li>This routine will only lookup objects in <em>hashed namespace</em></li>\n</ul>\n","group":"runtime"},"pspl_runtime_count_integer_embedded_data_objects":{"type":"function","file":"PSPL/PSPLRuntimeExtension.h","line":116,"lineto":116,"args":[{"name":"object","type":"const pspl_runtime_psplc_t*","comment":"Read-only handle identifying embedded PSPLC object to count objects from"}],"argline":"const pspl_runtime_psplc_t* object","sig":"const pspl_runtime_psplc_t*","return":{"type":"int","comment":"Count of integer-keyed objects"},"description":"<p>Count embedded objects in PSPLC keyed by integer</p>\n","comments":"<ul>\n<li><strong>This routine may only be called within extension/platform <code>load</code> hook</strong></li>\n<li>This routine will only lookup objects in <em>integer namespace</em></li>\n</ul>\n","group":"runtime"},"pspl_runtime_get_embedded_data_object_from_integer":{"type":"function","file":"PSPL/PSPLRuntimeExtension.h","line":130,"lineto":134,"args":[{"name":"object","type":"const pspl_runtime_psplc_t*","comment":"Read-only handle identifying embedded PSPLC object to get data object from"},{"name":"key","type":"uint32_t"},{"name":"data_object_out","type":"pspl_data_object_t*","comment":"Pointer to app-allocated data object structure needing to be populated (composing data ptr and length)"}],"argline":"const pspl_runtime_psplc_t* object,\n                                                       uint32_t key,\n                                                       pspl_data_object_t* data_object_out","sig":"const pspl_runtime_psplc_t*::uint32_t::pspl_data_object_t*","return":{"type":"int"},"description":"<p>Get embedded data object for extension by integer-key (used in integer lookup)</p>\n","comments":"<ul>\n<li><strong>This routine may only be called within extension/platform <code>load</code> hook</strong></li>\n<li>This routine will only lookup objects in <em>integer namespace</em></li>\n</ul>\n","group":"runtime"},"pspl_runtime_enumerate_integer_embedded_data_objects":{"type":"function","file":"PSPL/PSPLRuntimeExtension.h","line":146,"lineto":204,"args":[{"name":"object","type":"const pspl_runtime_psplc_t*","comment":"Read-only handle identifying embedded PSPLC object to get data object from"},{"name":"hook","type":"pspl_integer_enumerate_hook","comment":"Function pointer to call for each integer-keyed object. Returning -1 from hook will cancel enumeration."},{"name":"user_ptr","type":"void*"}],"argline":"const pspl_runtime_psplc_t* object,\n                                                          pspl_integer_enumerate_hook hook,\n                                                          void* user_ptr","sig":"const pspl_runtime_psplc_t*::pspl_integer_enumerate_hook::void*","return":{"type":"void"},"description":"<p>Enumerate integer-keyed embedded objects</p>\n","comments":"<ul>\n<li><strong>This routine may only be called within extension/platform <code>load</code> hook</strong></li>\n<li>This routine will only lookup objects in <em>integer namespace</em></li>\n</ul>\n","group":"runtime"},"pspl_toolchain_provide_copyright":{"type":"function","file":"PSPL/PSPLToolchainExtension.h","line":46,"lineto":48,"args":[{"name":"component_name","type":"const char*","comment":"Name of software component contained"},{"name":"copyright","type":"const char*","comment":"Copyright string of software component"},{"name":"licence","type":"const char*","comment":"Shortest-representable copy of attached licence (line-wrapped to 80 columns)"}],"argline":"const char* component_name,\n                                      const char* copyright,\n                                      const char* licence","sig":"const char*::const char*::const char*","return":{"type":"void"},"description":"<p>Provide software licencing details for extension</p>\n","comments":"<p>Call this method (within copyright hook) for each software component \ncontained in extension or platform</p>\n","group":"toolchain"},"pspl_toolchain_provide_subext":{"type":"function","file":"PSPL/PSPLToolchainExtension.h","line":66,"lineto":67,"args":[{"name":"subext_name","type":"const char*","comment":"Name of sub-extension"},{"name":"subext_desc","type":"const char*","comment":"Description of sub-extension"},{"name":"indent_level","type":"unsigned","comment":"Level of sub-intent; 0 and 1 are both *one* indent level"}],"argline":"const char* subext_name, const char* subext_desc,\n                                   unsigned indent_level","sig":"const char*::const char*::unsigned","return":{"type":"void"},"description":"<p>Provide sub-extension details for built-in help</p>\n","comments":"<p>Call this method (within subext hook) for each sub-extension contained\nwithin extension</p>\n","group":"toolchain"},"pspl_send_platform_instruction":{"type":"function","file":"PSPL/PSPLToolchainExtension.h","line":127,"lineto":127,"args":[{"name":"operation","type":"const char*"},{"name":"data","type":"const void*"}],"argline":"const char* operation, const void* data","sig":"const char*::const void*","return":{"type":"void"},"description":"<p>Send instruction to all platforms</p>\n","comments":"<p><em>Must</em> be called within <code>platform_instruct_hook</code></p>\n","group":"send"},"pspl_toolchain_init_other_extension":{"type":"function","file":"PSPL/PSPLToolchainExtension.h","line":143,"lineto":427,"args":[{"name":"ext_name","type":"const char*","comment":"Unique name of extension"}],"argline":"const char* ext_name","sig":"const char*","return":{"type":"int","comment":"0 if successful"},"description":"<p>Request the immediate initialisation of another extension by name\n(only valid within init hook)</p>\n","comments":"","group":"toolchain"},"pspl_runtime_init":{"type":"function","file":"PSPLRuntime.h","line":37,"lineto":37,"args":[{"name":"platform_out","type":"const pspl_platform_t**","comment":"Output pointer that's set with a reference to the compiled-in platform metadata structure"}],"argline":"const pspl_platform_t** platform_out","sig":"const pspl_platform_t**","return":{"type":"int","comment":"0 if successful, negative otherwise"},"description":"<p>Init PSPL Runtime</p>\n","comments":"<p>Allocates necessary state for the runtime platform compiled into <code>pspl-rt</code>.\nPSPLP package files may be loaded afterwards.</p>\n","group":"runtime"},"pspl_runtime_shutdown":{"type":"function","file":"PSPLRuntime.h","line":45,"lineto":48,"args":[],"argline":"","sig":"","return":{"type":"void"},"description":"<p>Shutdown PSPL Runtime</p>\n","comments":"<p>Deallocates any objects and archived files owned by the PSPL runtime,\ncloses any open packages, unloads all objects</p>\n","group":"runtime"},"pspl_runtime_load_package_file":{"type":"function","file":"PSPLRuntime.h","line":95,"lineto":95,"args":[{"name":"package_path","type":"const char*","comment":"path (absolute or relative to working directory) expressing location to PSPLP file"},{"name":"package_out","type":"const pspl_runtime_package_t**","comment":"Output pointer conveying package representation"}],"argline":"const char* package_path, const pspl_runtime_package_t** package_out","sig":"const char*::const pspl_runtime_package_t**","return":{"type":"int","comment":"0 if successful, or negative otherwise"},"description":"<p>Load a PSPLP package file using <code>&lt;stdio.h&gt;</code> routines</p>\n","comments":"","group":"runtime"},"pspl_runtime_load_package_provider":{"type":"function","file":"PSPLRuntime.h","line":109,"lineto":112,"args":[{"name":"package_path","type":"const char*","comment":"path expressing location to PSPLP file (supplied to 'open' hook)"},{"name":"data_provider_handle","type":"void*","comment":"application-allocated handle object for use with provided hooks"},{"name":"data_provider_hooks","type":"const pspl_data_provider_t*","comment":"application-populated data structure with hook implementations for data-handling routines"},{"name":"package_out","type":"const pspl_runtime_package_t**","comment":"Output pointer conveying package representation"}],"argline":"const char* package_path,\n                                       void* data_provider_handle,\n                                       const pspl_data_provider_t* data_provider_hooks,\n                                       const pspl_runtime_package_t** package_out","sig":"const char*::void*::const pspl_data_provider_t*::const pspl_runtime_package_t**","return":{"type":"int","comment":"0 if successful, or negative otherwise"},"description":"<p>Load a PSPLP package file using data-providing hook routines provided by application</p>\n","comments":"","group":"runtime"},"pspl_runtime_load_package_membuf":{"type":"function","file":"PSPLRuntime.h","line":122,"lineto":123,"args":[{"name":"package_data","type":"void*","comment":"pointer to PSPLP data"},{"name":"package_len","type":"size_t","comment":"length of PSPLP buffer in memory"},{"name":"package_out","type":"const pspl_runtime_package_t**","comment":"Output pointer conveying package representation"}],"argline":"void* package_data, size_t package_len,\n                                     const pspl_runtime_package_t** package_out","sig":"void*::size_t::const pspl_runtime_package_t**","return":{"type":"int","comment":"0 if successful, or negative otherwise"},"description":"<p>Load a PSPLP package file from application-provided memory buffer</p>\n","comments":"","group":"runtime"},"pspl_runtime_unload_package":{"type":"function","file":"PSPLRuntime.h","line":134,"lineto":137,"args":[{"name":"package","type":"const pspl_runtime_package_t*","comment":"Package representation to unload"}],"argline":"const pspl_runtime_package_t* package","sig":"const pspl_runtime_package_t*","return":{"type":"void"},"description":"<p>Unload PSPL package</p>\n","comments":"<p>Frees all allocated objects represented through this package.\nAll extension and platform runtimes will be instructed to unload\ntheir instances of the objects.</p>\n","group":"runtime"},"pspl_runtime_count_psplcs":{"type":"function","file":"PSPLRuntime.h","line":165,"lineto":165,"args":[{"name":"package","type":"const pspl_runtime_package_t*","comment":"Package representation to count from"}],"argline":"const pspl_runtime_package_t* package","sig":"const pspl_runtime_package_t*","return":{"type":"unsigned int","comment":"PSPLC count"},"description":"<p>Count embedded PSPLCs within package</p>\n","comments":"","group":"runtime"},"pspl_runtime_enumerate_psplcs":{"type":"function","file":"PSPLRuntime.h","line":180,"lineto":181,"args":[{"name":"package","type":"const pspl_runtime_package_t*","comment":"Package representation to enumerate from"},{"name":"hook","type":"pspl_runtime_enumerate_psplc_hook","comment":"Function to call for each PSPLC"}],"argline":"const pspl_runtime_package_t* package,\n                                   pspl_runtime_enumerate_psplc_hook hook","sig":"const pspl_runtime_package_t*::pspl_runtime_enumerate_psplc_hook","return":{"type":"void"},"description":"<p>Enumerate embedded PSPLCs within package</p>\n","comments":"","group":"runtime"},"pspl_runtime_get_psplc_from_key":{"type":"function","file":"PSPLRuntime.h","line":191,"lineto":192,"args":[{"name":"package","type":"pspl_runtime_package_t*"},{"name":"key","type":"const char*","comment":"Key-string to hash and use to look up PSPLC representation"},{"name":"retain","type":"int","comment":"If non-zero, the PSPLC representation will have internal reference count set to 1 when found"}],"argline":"pspl_runtime_package_t* package,\n                                                            const char* key, int retain","sig":"pspl_runtime_package_t*::const char*::int","return":{"type":"const pspl_runtime_psplc_t*","comment":"PSPLC representation (or NULL if not available)"},"description":"<p>Get PSPLC representation from key string and optionally perform retain</p>\n","comments":"","group":"runtime"},"pspl_runtime_get_psplc_from_hash":{"type":"function","file":"PSPLRuntime.h","line":202,"lineto":203,"args":[{"name":"package","type":"pspl_runtime_package_t*"},{"name":"hash","type":"pspl_hash*","comment":"Hash to use to look up PSPLC representation"},{"name":"retain","type":"int","comment":"If non-zero, the PSPLC representation will have internal reference count set to 1 when found"}],"argline":"pspl_runtime_package_t* package,\n                                                             pspl_hash* hash, int retain","sig":"pspl_runtime_package_t*::pspl_hash*::int","return":{"type":"const pspl_runtime_psplc_t*","comment":"PSPLC representation (or NULL if not available)"},"description":"<p>Get PSPLC representation from hash and optionally perform retain</p>\n","comments":"","group":"runtime"},"pspl_runtime_retain_psplc":{"type":"function","file":"PSPLRuntime.h","line":210,"lineto":210,"args":[{"name":"psplc","type":"pspl_runtime_psplc_t*","comment":"PSPLC representation"}],"argline":"pspl_runtime_psplc_t* psplc","sig":"pspl_runtime_psplc_t*","return":{"type":"void"},"description":"<p>Increment reference-count of PSPLC representation</p>\n","comments":"","group":"runtime"},"pspl_runtime_release_psplc":{"type":"function","file":"PSPLRuntime.h","line":217,"lineto":217,"args":[{"name":"psplc","type":"pspl_runtime_psplc_t*","comment":"PSPLC representation"}],"argline":"pspl_runtime_psplc_t* psplc","sig":"pspl_runtime_psplc_t*","return":{"type":"void"},"description":"<p>Decrement reference-count of PSPLC representation</p>\n","comments":"","group":"runtime"},"pspl_runtime_bind_psplc":{"type":"function","file":"PSPLRuntime.h","line":224,"lineto":227,"args":[{"name":"psplc","type":"pspl_runtime_psplc_t*","comment":"PSPLC representation"}],"argline":"pspl_runtime_psplc_t* psplc","sig":"pspl_runtime_psplc_t*","return":{"type":"void"},"description":"<p>Bind PSPLC representation to GPU (implicitly retains if unloaded)</p>\n","comments":"","group":"runtime"},"pspl_runtime_count_archived_files":{"type":"function","file":"PSPLRuntime.h","line":253,"lineto":253,"args":[{"name":"package","type":"const pspl_runtime_package_t*","comment":"Package representation to count from"}],"argline":"const pspl_runtime_package_t* package","sig":"const pspl_runtime_package_t*","return":{"type":"unsigned int","comment":"Archived file count"},"description":"<p>Count archived files within package</p>\n","comments":"","group":"runtime"},"pspl_runtime_enumerate_archived_files":{"type":"function","file":"PSPLRuntime.h","line":268,"lineto":269,"args":[{"name":"package","type":"const pspl_runtime_package_t*","comment":"Package representation to enumerate from"},{"name":"hook","type":"pspl_runtime_enumerate_archived_file_hook","comment":"Function to call for each file"}],"argline":"const pspl_runtime_package_t* package,\n                                           pspl_runtime_enumerate_archived_file_hook hook","sig":"const pspl_runtime_package_t*::pspl_runtime_enumerate_archived_file_hook","return":{"type":"void"},"description":"<p>Enumerate archived files within package</p>\n","comments":"","group":"runtime"},"pspl_runtime_get_archived_file_from_hash":{"type":"function","file":"PSPLRuntime.h","line":279,"lineto":280,"args":[{"name":"package","type":"const pspl_runtime_package_t*"},{"name":"hash","type":"const pspl_hash*","comment":"Hash to use to look up archived file"},{"name":"retain","type":"int","comment":"If non-zero, the archived file will have internal reference count set to 1 when found"}],"argline":"const pspl_runtime_package_t* package,\n                                                                        const pspl_hash* hash, int retain","sig":"const pspl_runtime_package_t*::const pspl_hash*::int","return":{"type":"const pspl_runtime_arc_file_t*","comment":"File representation (or NULL if not available)"},"description":"<p>Get archived file from hash and optionally perform retain</p>\n","comments":"","group":"runtime"},"pspl_runtime_retain_archived_file":{"type":"function","file":"PSPLRuntime.h","line":287,"lineto":287,"args":[{"name":"file","type":"const pspl_runtime_arc_file_t*","comment":"File representation"}],"argline":"const pspl_runtime_arc_file_t* file","sig":"const pspl_runtime_arc_file_t*","return":{"type":"void"},"description":"<p>Increment reference-count of archived file</p>\n","comments":"","group":"runtime"},"pspl_runtime_release_archived_file":{"type":"function","file":"PSPLRuntime.h","line":294,"lineto":294,"args":[{"name":"file","type":"const pspl_runtime_arc_file_t*","comment":"File representation"}],"argline":"const pspl_runtime_arc_file_t* file","sig":"const pspl_runtime_arc_file_t*","return":{"type":"void"},"description":"<p>Decrement reference-count of archived file</p>\n","comments":"","group":"runtime"},"pspl_runtime_access_archived_file":{"type":"function","file":"PSPLRuntime.h","line":308,"lineto":311,"args":[{"name":"file","type":"const pspl_runtime_arc_file_t*","comment":"Archived file object"},{"name":"provider_hooks_out","type":"const pspl_data_provider_t**","comment":"Hook structure used to access data"},{"name":"provider_handle_out","type":"const void**","comment":"File instance containing requested data (pre-seeked)"},{"name":"len_out","type":"size_t*","comment":"Length of file record"}],"argline":"const pspl_runtime_arc_file_t* file,\n                                      const pspl_data_provider_t** provider_hooks_out,\n                                      const void** provider_handle_out,\n                                      size_t* len_out","sig":"const pspl_runtime_arc_file_t*::const pspl_data_provider_t**::const void**::size_t*","return":{"type":"int","comment":"0 if successful, otherwise negative"},"description":"<p>Get pre-seeked FILE pointer and length of archived file</p>\n","comments":"<p>An advanced API to bypass the reference-counted loading mechanism of\npspl-rt and receive a FILE pointer ready to load data from disk directly</p>\n","group":"runtime"}},"globals":{"PSPL_HASH_STRING_LEN":{"value":"41","file":"PSPL/PSPLCommon.h","line":196,"comments":"Length of string-buffer filled by `pspl_hash_fmt`"}},"types":[["pspl_data_object_t",{"type":"struct","value":"pspl_data_object_t","file":"PSPL/PSPLRuntimeExtension.h","line":28,"lineto":31,"block":"size_t object_len\nvoid* object_data","tdef":"typedef","comments":"* Embedded data object type","used":{"returns":[],"needs":["pspl_runtime_get_embedded_data_object_from_hash","pspl_runtime_get_embedded_data_object_from_integer","pspl_runtime_get_embedded_data_object_from_key"]}}],["pspl_data_provider_t",{"type":"struct","value":"pspl_data_provider_t","file":"PSPLRuntime.h","line":59,"lineto":85,"block":"int(*open)(void* handle, const char* path)\nvoid(*close)(const void* handle)\nsize_t(*len)(const void* handle)\nint(*seek)(const void* handle, size_t seek_set)\nsize_t(*tell)(const void* handle)\nsize_t(*read)(const void* handle, size_t num_bytes, void** data_out)\nsize_t(*read_direct)(const void* handle, size_t num_bytes, void* data_buf)","tdef":"typedef","comments":"Data provider type","used":{"returns":[],"needs":["pspl_runtime_access_archived_file","pspl_runtime_load_package_provider"]}}],["pspl_extension_t",{"type":"struct","value":"pspl_extension_t","file":"PSPL/PSPLCommon.h","line":222,"lineto":233,"block":"const char* extension_name\nconst char* extension_desc\n# ifdef PSPL_TOOLCHAIN const struct _pspl_toolchain_extension* toolchain_extension\n# endif # ifdef PSPL_RUNTIME const struct _pspl_runtime_extension* runtime_extension\n# endif","tdef":"typedef","comments":"Common extension definition structure\n\nInstances of this structure are generated before compile time\nvia CMake. The structure is shared between the *Toolchain* and\n*Runtime* portions of PSPL, thereby maintaining a common extension\nnamespace.","used":{"returns":[],"needs":[]}}],["pspl_platform_t",{"type":"struct","value":"pspl_platform_t","file":"PSPL/PSPLCommon.h","line":244,"lineto":257,"block":"const char* platform_name\nconst char* platform_desc\nuint8_t byte_order\nuint8_t padding[3]\n# ifdef PSPL_TOOLCHAIN const struct _pspl_toolchain_platform* toolchain_platform\n# endif # ifdef PSPL_RUNTIME const struct _pspl_runtime_platform* runtime_platform\n# endif","tdef":"typedef","comments":"Common platform description structure\n\nInstances of this structure are generated before compile time\nvia CMake. The structure is shared between the *Toolchain* and\n*Runtime* portions of PSPL, thereby maintaining a common platform\nnamespace.","used":{"returns":[],"needs":["pspl_runtime_init"]}}],["pspl_runtime_arc_file_t",{"type":"struct","value":"pspl_runtime_arc_file_t","file":"PSPLRuntime.h","line":233,"lineto":245,"block":"const pspl_hash hash\nconst pspl_runtime_package_t* parent\nsize_t file_len\nvoid* file_data","tdef":"typedef","comments":"Archived file object (from PSPLP)\nHolds state information about file during runtime","used":{"returns":["pspl_runtime_get_archived_file_from_hash"],"needs":["pspl_runtime_access_archived_file","pspl_runtime_release_archived_file","pspl_runtime_retain_archived_file"]}}],["pspl_runtime_package_t",{"type":"struct","value":"pspl_runtime_package_t","file":"PSPLRuntime.h","line":53,"lineto":53,"block":"","tdef":"typedef","comments":"Package representation type","used":{"returns":[],"needs":["pspl_runtime_count_archived_files","pspl_runtime_count_psplcs","pspl_runtime_enumerate_archived_files","pspl_runtime_enumerate_psplcs","pspl_runtime_get_archived_file_from_hash","pspl_runtime_get_psplc_from_hash","pspl_runtime_get_psplc_from_key","pspl_runtime_load_package_file","pspl_runtime_load_package_membuf","pspl_runtime_load_package_provider","pspl_runtime_unload_package"]}}],["pspl_runtime_psplc_t",{"type":"struct","value":"pspl_runtime_psplc_t","file":"PSPLRuntime.h","line":143,"lineto":156,"block":"const pspl_hash hash\nconst pspl_runtime_package_t* parent\n# ifdef PSPL_RUNTIME pspl_platform_shader_object_t native_shader\n# endif","tdef":"typedef","comments":"PSPLC runtime representation (from PSPLC)\nHolds state information about object during runtime","used":{"returns":["pspl_runtime_get_psplc_from_hash","pspl_runtime_get_psplc_from_key"],"needs":["pspl_runtime_bind_psplc","pspl_runtime_count_hash_embedded_data_objects","pspl_runtime_count_integer_embedded_data_objects","pspl_runtime_enumerate_hash_embedded_data_objects","pspl_runtime_enumerate_integer_embedded_data_objects","pspl_runtime_get_embedded_data_object_from_hash","pspl_runtime_get_embedded_data_object_from_integer","pspl_runtime_get_embedded_data_object_from_key","pspl_runtime_release_psplc","pspl_runtime_retain_psplc"]}}],["pspl_toolchain_context_t",{"type":"struct","value":"pspl_toolchain_context_t","file":"PSPL/PSPLToolchainExtension.h","line":80,"lineto":106,"block":"unsigned int target_runtime_platforms_c\nconst pspl_platform_t* const * target_runtime_platforms\nunsigned target_endianness\nconst char* pspl_name\nconst char* pspl_enclosing_dir\nunsigned int def_c\nconst char** def_k\nconst char** def_v\nconst char* output_path","tdef":"typedef","comments":"Toolchain driver context (data consistent from init to finish)","used":{"returns":[],"needs":[]}}]],"prefix":"include","groups":[["PSPL_PSPLCommon",["pspl_error","pspl_warn"]],["hash",["pspl_hash_cmp","pspl_hash_cpy","pspl_hash_fmt","pspl_hash_parse"]],["malloc",["pspl_malloc_context_destroy","pspl_malloc_context_init","pspl_malloc_free","pspl_malloc_malloc"]],["runtime",["pspl_runtime_access_archived_file","pspl_runtime_bind_psplc","pspl_runtime_count_archived_files","pspl_runtime_count_hash_embedded_data_objects","pspl_runtime_count_integer_embedded_data_objects","pspl_runtime_count_psplcs","pspl_runtime_enumerate_archived_files","pspl_runtime_enumerate_hash_embedded_data_objects","pspl_runtime_enumerate_integer_embedded_data_objects","pspl_runtime_enumerate_psplcs","pspl_runtime_get_archived_file_from_hash","pspl_runtime_get_embedded_data_object_from_hash","pspl_runtime_get_embedded_data_object_from_integer","pspl_runtime_get_embedded_data_object_from_key","pspl_runtime_get_psplc_from_hash","pspl_runtime_get_psplc_from_key","pspl_runtime_init","pspl_runtime_load_package_file","pspl_runtime_load_package_membuf","pspl_runtime_load_package_provider","pspl_runtime_release_archived_file","pspl_runtime_release_psplc","pspl_runtime_retain_archived_file","pspl_runtime_retain_psplc","pspl_runtime_shutdown","pspl_runtime_unload_package"]],["send",["pspl_send_platform_instruction"]],["toolchain",["pspl_toolchain_init_other_extension","pspl_toolchain_provide_copyright","pspl_toolchain_provide_subext"]]]}