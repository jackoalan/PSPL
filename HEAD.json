{"files":[{"file":"PSPL.h","functions":["pspl_hash_cmp","pspl_hash_cpy","pspl_hash_fmt","pspl_hash_parse","pspl_runtime_init","pspl_runtime_shutdown","pspl_runtime_load_package_file","pspl_runtime_load_package_provider","pspl_runtime_load_package_membuf","pspl_runtime_unload_package","pspl_runtime_count_psplcs","pspl_runtime_enumerate_psplcs","pspl_runtime_get_psplc_from_key","pspl_runtime_get_psplc_from_hash","pspl_runtime_retain_psplc","pspl_runtime_release_psplc","pspl_runtime_count_archived_files","pspl_runtime_enumerate_archived_files","pspl_get_archived_file_from_hash","pspl_runtime_retain_archived_file","pspl_runtime_release_archived_file"],"meta":{"brief":"General Toolchain *and* Runtime Public API Bits","defgroup":"pspl_hash Hash Manipulation Routines","ingroup":"PSPL","comments":"\n"},"lines":345},{"file":"PSPLExtension.h","functions":[],"meta":{"brief":"Primary Extension and Platform Structures","ingroup":"PSPL","comments":"\n"},"lines":71},{"file":"PSPLRuntimeExtension.h","functions":[],"meta":{},"lines":102},{"file":"PSPLToolchainExtension.h","functions":[],"meta":{},"lines":379},{"file":"PSPLValue.h","functions":[],"meta":{},"lines":172}],"functions":{"pspl_hash_cmp":{"type":"function","file":"PSPL.h","line":51,"lineto":53,"args":[{"name":"a","type":"const pspl_hash*","comment":"First Hash"},{"name":"b","type":"const pspl_hash*","comment":"Second Hash"}],"argline":"const pspl_hash* a, const pspl_hash* b","sig":"const pspl_hash*::const pspl_hash*","return":{"type":"inline int","comment":"0 if identical, positive or negative otherwise"},"description":"<p>Compare the contents of two hash objects</p>\n","comments":"","group":"hash"},"pspl_hash_cpy":{"type":"function","file":"PSPL.h","line":61,"lineto":63,"args":[{"name":"dest","type":"pspl_hash*","comment":"Hash location to copy to"},{"name":"src","type":"const pspl_hash*","comment":"Hash location to copy from"}],"argline":"pspl_hash* dest, const pspl_hash* src","sig":"pspl_hash*::const pspl_hash*","return":{"type":"inline void"},"description":"<p>Copy hash to another location in memory</p>\n","comments":"","group":"hash"},"pspl_hash_fmt":{"type":"function","file":"PSPL.h","line":76,"lineto":76,"args":[{"name":"out","type":"char*","comment":"String-buffer to fill (allocated to length of `PSPL_HASH_STRING_LEN`)"},{"name":"hash","type":"const pspl_hash*","comment":"Hash object to be read"}],"argline":"char* out, const pspl_hash* hash","sig":"char*::const pspl_hash*","return":{"type":"void"},"description":"<p>Write hash data as string</p>\n","comments":"","group":"hash"},"pspl_hash_parse":{"type":"function","file":"PSPL.h","line":84,"lineto":90,"args":[{"name":"out","type":"pspl_hash*","comment":"String-buffer containing hash as generated by `pspl_hash_fmt`"},{"name":"hash_str","type":"const char*"}],"argline":"pspl_hash* out, const char* hash_str","sig":"pspl_hash*::const char*","return":{"type":"void"},"description":"<p>Parse hash string as hash object</p>\n","comments":"","group":"hash"},"pspl_runtime_init":{"type":"function","file":"PSPL.h","line":102,"lineto":102,"args":[{"name":"platform_out","type":"const pspl_platform_t**","comment":"Output pointer that's set with a reference to the compiled-in platform metadata structure"}],"argline":"const pspl_platform_t** platform_out","sig":"const pspl_platform_t**","return":{"type":"int","comment":"0 if successful, negative otherwise"},"description":"<p>Init PSPL Runtime</p>\n","comments":"<p>Allocates necessary state for the runtime platform compiled into <code>pspl-rt</code>.\nPSPLP package files may be loaded afterwards.</p>\n","group":"runtime"},"pspl_runtime_shutdown":{"type":"function","file":"PSPL.h","line":110,"lineto":113,"args":[],"argline":"","sig":"","return":{"type":"void"},"description":"<p>Shutdown PSPL Runtime</p>\n","comments":"<p>Deallocates any objects and archived files owned by the PSPL runtime,\ncloses any open packages, unloads all objects</p>\n","group":"runtime"},"pspl_runtime_load_package_file":{"type":"function","file":"PSPL.h","line":154,"lineto":154,"args":[{"name":"package_path","type":"const char*","comment":"path (absolute or relative to working directory) expressing location to PSPLP file"},{"name":"package_out","type":"const pspl_runtime_package_rep_t**","comment":"Output pointer conveying package representation"}],"argline":"const char* package_path, const pspl_runtime_package_rep_t** package_out","sig":"const char*::const pspl_runtime_package_rep_t**","return":{"type":"int","comment":"0 if successful, or negative otherwise"},"description":"<p>Load a PSPLP package file using <code>&lt;stdio.h&gt;</code> routines</p>\n","comments":"","group":"runtime"},"pspl_runtime_load_package_provider":{"type":"function","file":"PSPL.h","line":166,"lineto":167,"args":[{"name":"package_path","type":"const char*","comment":"path expressing location to PSPLP file (supplied to 'open' hook)"},{"name":"data_provider","type":"const pspl_data_provider_t*","comment":"application-populated data structure with hook implementations for data-handling routines"},{"name":"package_out","type":"const pspl_runtime_package_rep_t**","comment":"Output pointer conveying package representation"}],"argline":"const char* package_path, const pspl_data_provider_t* data_provider,\n                                       const pspl_runtime_package_rep_t** package_out","sig":"const char*::const pspl_data_provider_t*::const pspl_runtime_package_rep_t**","return":{"type":"int","comment":"0 if successful, or negative otherwise"},"description":"<p>Load a PSPLP package file using data-providing hook routines provided by application</p>\n","comments":"","group":"runtime"},"pspl_runtime_load_package_membuf":{"type":"function","file":"PSPL.h","line":177,"lineto":178,"args":[{"name":"package_data","type":"const void*","comment":"pointer to PSPLP data"},{"name":"package_len","type":"size_t","comment":"length of PSPLP buffer in memory"},{"name":"package_out","type":"const pspl_runtime_package_rep_t**","comment":"Output pointer conveying package representation"}],"argline":"const void* package_data, size_t package_len,\n                                     const pspl_runtime_package_rep_t** package_out","sig":"const void*::size_t::const pspl_runtime_package_rep_t**","return":{"type":"int","comment":"0 if successful, or negative otherwise"},"description":"<p>Load a PSPLP package file from application-provided memory buffer</p>\n","comments":"","group":"runtime"},"pspl_runtime_unload_package":{"type":"function","file":"PSPL.h","line":189,"lineto":192,"args":[{"name":"package","type":"const pspl_runtime_package_rep_t*","comment":"Package representation to unload"}],"argline":"const pspl_runtime_package_rep_t* package","sig":"const pspl_runtime_package_rep_t*","return":{"type":"void"},"description":"<ul>\n<li>Unload PSPL package\n*</li>\n<li>Frees all allocated objects represented through this package.</li>\n<li>All extension and platform runtimes will be instructed to unload</li>\n<li>their instances of the objects.\n*</li>\n<li>@param package Package representation to unload</li>\n</ul>\n","comments":"","group":"runtime"},"pspl_runtime_count_psplcs":{"type":"function","file":"PSPL.h","line":218,"lineto":218,"args":[{"name":"package","type":"const pspl_runtime_package_rep_t*","comment":"Package representation to count from *"}],"argline":"const pspl_runtime_package_rep_t* package","sig":"const pspl_runtime_package_rep_t*","return":{"type":"unsigned int","comment":"PSPLC count"},"description":"<ul>\n<li>Count embedded PSPLCs within package\n*</li>\n<li>@param package Package representation to count from</li>\n<li>@return PSPLC count</li>\n</ul>\n","comments":"","group":"runtime"},"pspl_runtime_enumerate_psplcs":{"type":"function","file":"PSPL.h","line":233,"lineto":234,"args":[{"name":"package","type":"const pspl_runtime_package_rep_t*","comment":"Package representation to enumerate from"},{"name":"hook","type":"pspl_runtime_enumerate_psplc_hook","comment":"Function to call for each PSPLC"}],"argline":"const pspl_runtime_package_rep_t* package,\n                                   pspl_runtime_enumerate_psplc_hook hook","sig":"const pspl_runtime_package_rep_t*::pspl_runtime_enumerate_psplc_hook","return":{"type":"void"},"description":"<p>Enumerate embedded PSPLCs within package</p>\n","comments":"","group":"runtime"},"pspl_runtime_get_psplc_from_key":{"type":"function","file":"PSPL.h","line":244,"lineto":244,"args":[{"name":"key","type":"const char*","comment":"Key-string to hash and use to look up PSPLC representation *"},{"name":"retain","type":"int","comment":"If non-zero, the PSPLC representation will have internal * reference count set to 1 when found *"}],"argline":"const char* key, int retain","sig":"const char*::int","return":{"type":"const pspl_runtime_psplc_rep_t*","comment":"PSPLC representation (or NULL if not available)"},"description":"<ul>\n<li>Get PSPLC representation from key string and optionally perform retain\n*</li>\n<li>@param key Key-string to hash and use to look up PSPLC representation</li>\n<li>@param retain If non-zero, the PSPLC representation will have internal </li>\n<li>       reference count set to 1 when found</li>\n<li>@return PSPLC representation (or NULL if not available)</li>\n</ul>\n","comments":"","group":"runtime"},"pspl_runtime_get_psplc_from_hash":{"type":"function","file":"PSPL.h","line":254,"lineto":254,"args":[{"name":"hash","type":"pspl_hash*","comment":"Hash to use to look up PSPLC representation *"},{"name":"retain","type":"int","comment":"If non-zero, the PSPLC representation will have internal * reference count set to 1 when found *"}],"argline":"pspl_hash* hash, int retain","sig":"pspl_hash*::int","return":{"type":"const pspl_runtime_psplc_rep_t*","comment":"PSPLC representation (or NULL if not available)"},"description":"<ul>\n<li>Get PSPLC representation from hash and optionally perform retain \n*</li>\n<li>@param hash Hash to use to look up PSPLC representation</li>\n<li>@param retain If non-zero, the PSPLC representation will have internal</li>\n<li>       reference count set to 1 when found</li>\n<li>@return PSPLC representation (or NULL if not available)</li>\n</ul>\n","comments":"","group":"runtime"},"pspl_runtime_retain_psplc":{"type":"function","file":"PSPL.h","line":261,"lineto":261,"args":[{"name":"psplc","type":"const pspl_runtime_psplc_rep_t*","comment":"PSPLC representation"}],"argline":"const pspl_runtime_psplc_rep_t* psplc","sig":"const pspl_runtime_psplc_rep_t*","return":{"type":"void"},"description":"<ul>\n<li>Increment reference-count of PSPLC representation\n*</li>\n<li>@param psplc PSPLC representation</li>\n</ul>\n","comments":"","group":"runtime"},"pspl_runtime_release_psplc":{"type":"function","file":"PSPL.h","line":268,"lineto":271,"args":[{"name":"psplc","type":"const pspl_runtime_psplc_rep_t*","comment":"PSPLC representation"}],"argline":"const pspl_runtime_psplc_rep_t* psplc","sig":"const pspl_runtime_psplc_rep_t*","return":{"type":"void"},"description":"<p>Decrement reference-count of PSPLC representation</p>\n","comments":"","group":"runtime"},"pspl_runtime_count_archived_files":{"type":"function","file":"PSPL.h","line":297,"lineto":297,"args":[{"name":"package","type":"const pspl_runtime_package_rep_t*","comment":"Package representation to count from"}],"argline":"const pspl_runtime_package_rep_t* package","sig":"const pspl_runtime_package_rep_t*","return":{"type":"unsigned int","comment":"Archived file count"},"description":"<p>Count archived files within package</p>\n","comments":"","group":"runtime"},"pspl_runtime_enumerate_archived_files":{"type":"function","file":"PSPL.h","line":312,"lineto":313,"args":[{"name":"package","type":"const pspl_runtime_package_rep_t*","comment":"Package representation to enumerate from"},{"name":"hook","type":"pspl_runtime_enumerate_archived_file_hook","comment":"Function to call for each file"}],"argline":"const pspl_runtime_package_rep_t* package,\n                                           pspl_runtime_enumerate_archived_file_hook hook","sig":"const pspl_runtime_package_rep_t*::pspl_runtime_enumerate_archived_file_hook","return":{"type":"void"},"description":"<p>Enumerate archived files within package</p>\n","comments":"","group":"runtime"},"pspl_get_archived_file_from_hash":{"type":"function","file":"PSPL.h","line":323,"lineto":323,"args":[{"name":"hash","type":"pspl_hash*","comment":"Hash to use to look up archived file *"},{"name":"retain","type":"int","comment":"If non-zero, the archived file will have internal * reference count set to 1 when found *"}],"argline":"pspl_hash* hash, int retain","sig":"pspl_hash*::int","return":{"type":"const pspl_runtime_arc_file_rep_t*","comment":"File representation (or NULL if not available)"},"description":"<ul>\n<li>Get archived file from hash and optionally perform retain\n*</li>\n<li>@param hash Hash to use to look up archived file</li>\n<li>@param retain If non-zero, the archived file will have internal</li>\n<li>       reference count set to 1 when found</li>\n<li>@return File representation (or NULL if not available)</li>\n</ul>\n","comments":"","group":"get"},"pspl_runtime_retain_archived_file":{"type":"function","file":"PSPL.h","line":330,"lineto":330,"args":[{"name":"file","type":"const pspl_runtime_arc_file_rep_t*","comment":"File representation"}],"argline":"const pspl_runtime_arc_file_rep_t* file","sig":"const pspl_runtime_arc_file_rep_t*","return":{"type":"void"},"description":"<p>Increment reference-count of archived file</p>\n","comments":"","group":"runtime"},"pspl_runtime_release_archived_file":{"type":"function","file":"PSPL.h","line":337,"lineto":339,"args":[{"name":"file","type":"const pspl_runtime_arc_file_rep_t*","comment":"File representation"}],"argline":"const pspl_runtime_arc_file_rep_t* file","sig":"const pspl_runtime_arc_file_rep_t*","return":{"type":"void"},"description":"<p>Decrement reference-count of archived file</p>\n","comments":"","group":"runtime"}},"globals":{"PSPL_HASH_STRING_LEN":{"value":"41","file":"PSPL.h","line":68,"comments":"Length of string-buffer filled by `pspl_hash_fmt`"}},"types":[["PSPL",{"type":"enum","file":"PSPL.h","line":30,"lineto":33,"block":"PSPL_UNSPEC_ENDIAN\nPSPL_LITTLE_ENDIAN\nPSPL_BIG_ENDIAN\nPSPL_BI_ENDIAN","tdef":null,"comments":"* Endianness enumerations","used":{"returns":[],"needs":[]}}],["pspl_data_provider_t",{"type":"struct","value":"pspl_data_provider_t","file":"PSPL.h","line":124,"lineto":144,"block":"const void*(*open)(const char* path)\nvoid(*close)(const void* handle)\nsize_t(*len)(const void* handle)\nint(*seek)(const void* handle, size_t seek_set)\nsize_t(*read)(const void* handle, size_t num_bytes, void* data_out)","tdef":"typedef","comments":"* Data provider type","used":{"returns":[],"needs":["pspl_runtime_load_package_provider"]}}],["pspl_extension_t",{"type":"struct","value":"pspl_extension_t","file":"PSPLExtension.h","line":29,"lineto":40,"block":"const char* extension_name\nconst char* extension_desc\n# ifdef PSPL_TOOLCHAIN const struct _pspl_toolchain_extension* toolchain_extension\n# endif # ifdef PSPL_RUNTIME const struct _pspl_runtime_extension* runtime_extension\n# endif","tdef":"typedef","comments":"* Common extension definition structure\n*\n* Instances of this structure are generated before compile time\n* via CMake. The structure is shared between the *Toolchain* and\n* *Runtime* portions of PSPL, thereby maintaining a common extension\n* namespace.","used":{"returns":[],"needs":[]}}],["pspl_platform_t",{"type":"struct","value":"pspl_platform_t","file":"PSPLExtension.h","line":51,"lineto":64,"block":"const char* platform_name\nconst char* platform_desc\nuint8_t byte_order\nuint8_t padding[3]\n# ifdef PSPL_TOOLCHAIN const struct _pspl_toolchain_platform* toolchain_platform\n# endif # ifdef PSPL_RUNTIME const struct _pspl_runtime_platform* runtime_platform\n# endif","tdef":"typedef","comments":"* Common platform description structure \n*\n* Instances of this structure are generated before compile time\n* via CMake. The structure is shared between the *Toolchain* and\n* *Runtime* portions of PSPL, thereby maintaining a common platform\n* namespace.","used":{"returns":[],"needs":["pspl_runtime_init"]}}],["pspl_runtime_arc_file_rep_t",{"type":"struct","value":"pspl_runtime_arc_file_rep_t","file":"PSPL.h","line":277,"lineto":289,"block":"pspl_hash hash\nsize_t file_len\nconst void* file_data\nconst void* pspl_internals","tdef":"typedef","comments":"* Archived file object (from PSPLP)\n* Holds state information about file during runtime","used":{"returns":["pspl_get_archived_file_from_hash"],"needs":["pspl_runtime_release_archived_file","pspl_runtime_retain_archived_file"]}}],["pspl_runtime_package_rep_t",{"type":"struct","value":"pspl_runtime_package_rep_t","file":"PSPL.h","line":118,"lineto":118,"block":"","tdef":"typedef","comments":"* Package representation type","used":{"returns":[],"needs":["pspl_runtime_count_archived_files","pspl_runtime_count_psplcs","pspl_runtime_enumerate_archived_files","pspl_runtime_enumerate_psplcs","pspl_runtime_load_package_file","pspl_runtime_load_package_membuf","pspl_runtime_load_package_provider","pspl_runtime_unload_package"]}}],["pspl_runtime_psplc_rep_t",{"type":"struct","value":"pspl_runtime_psplc_rep_t","file":"PSPL.h","line":198,"lineto":209,"block":"pspl_hash hash\npspl_platform_shader_object_t native_shader\nconst void* pspl_internals","tdef":"typedef","comments":"* PSPLC runtime representation (from PSPLC)\n* Holds state information about object during runtime","used":{"returns":["pspl_runtime_get_psplc_from_hash","pspl_runtime_get_psplc_from_key"],"needs":["pspl_runtime_release_psplc","pspl_runtime_retain_psplc"]}}]],"prefix":"include/PSPL","groups":[["get",["pspl_get_archived_file_from_hash"]],["hash",["pspl_hash_cmp","pspl_hash_cpy","pspl_hash_fmt","pspl_hash_parse"]],["runtime",["pspl_runtime_count_archived_files","pspl_runtime_count_psplcs","pspl_runtime_enumerate_archived_files","pspl_runtime_enumerate_psplcs","pspl_runtime_get_psplc_from_hash","pspl_runtime_get_psplc_from_key","pspl_runtime_init","pspl_runtime_load_package_file","pspl_runtime_load_package_membuf","pspl_runtime_load_package_provider","pspl_runtime_release_archived_file","pspl_runtime_release_psplc","pspl_runtime_retain_archived_file","pspl_runtime_retain_psplc","pspl_runtime_shutdown","pspl_runtime_unload_package"]]]}