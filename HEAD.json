{"files":[{"file":"PSPL.h","functions":["pspl_error","pspl_warn","pspl_malloc_context_init","pspl_malloc_context_destroy","pspl_malloc_malloc","pspl_malloc_free","pspl_hash_cmp","pspl_hash_cpy","pspl_hash_fmt","pspl_hash_parse"],"meta":{"brief":"General Toolchain *and* Runtime Public API Bits","defgroup":"pspl_malloc Memory management context","ingroup":"PSPL","comments":"\n"},"lines":201},{"file":"PSPLRuntimeExtension.h","functions":[],"meta":{},"lines":106},{"file":"PSPLToolchainExtension.h","functions":["pspl_toolchain_provide_copyright","pspl_toolchain_init_other_extension"],"meta":{"brief":"API for extending the PSPL language","defgroup":"pspl_toolchain API for extending the PSPL language","ingroup":"PSPL","comments":"\n"},"lines":397},{"file":"PSPLValue.h","functions":[],"meta":{},"lines":172}],"functions":{"pspl_error":{"type":"function","file":"PSPL.h","line":49,"lineto":49,"args":[{"name":"exit_code","type":"int","comment":"Error code to use with `exit`"},{"name":"brief","type":"const char*","comment":"Short string briefly describing error"},{"name":"msg","type":"const char*","comment":"Format string elaborating error details"}],"argline":"int exit_code, const char* brief, const char* msg, ...","sig":"int::const char*::const char*","return":{"type":"void"},"description":"<p>Raise globally-recognised error condition (terminating the entire program)</p>\n","comments":"","group":"PSPL"},"pspl_warn":{"type":"function","file":"PSPL.h","line":56,"lineto":60,"args":[{"name":"brief","type":"const char*","comment":"Short string briefly describing warning"},{"name":"msg","type":"const char*","comment":"Format string elaborating warning details"}],"argline":"const char* brief, const char* msg, ...","sig":"const char*::const char*","return":{"type":"void"},"description":"<p>Raise globally-recognised warning</p>\n","comments":"","group":"PSPL"},"pspl_malloc_context_init":{"type":"function","file":"PSPL.h","line":77,"lineto":77,"args":[{"name":"context","type":"pspl_malloc_context_t*","comment":"Context object to populate"}],"argline":"pspl_malloc_context_t* context","sig":"pspl_malloc_context_t*","return":{"type":"void"},"description":"<p>Init Malloc Context for tracking allocated objects</p>\n","comments":"","group":"malloc"},"pspl_malloc_context_destroy":{"type":"function","file":"PSPL.h","line":84,"lineto":84,"args":[{"name":"context","type":"pspl_malloc_context_t*","comment":"Context object to destroy"}],"argline":"pspl_malloc_context_t* context","sig":"pspl_malloc_context_t*","return":{"type":"void"},"description":"<p>Destroy Malloc Context and free tracked memory objects with it</p>\n","comments":"","group":"malloc"},"pspl_malloc_malloc":{"type":"function","file":"PSPL.h","line":92,"lineto":92,"args":[{"name":"context","type":"pspl_malloc_context_t*","comment":"Context object to add memory object within"},{"name":"size","type":"size_t"}],"argline":"pspl_malloc_context_t* context, size_t size","sig":"pspl_malloc_context_t*::size_t","return":{"type":"void*","comment":"Newly-allocated memory object pointer"},"description":"<p>Allocate memory object and track within context</p>\n","comments":"","group":"malloc"},"pspl_malloc_free":{"type":"function","file":"PSPL.h","line":100,"lineto":103,"args":[{"name":"context","type":"pspl_malloc_context_t*","comment":"Context object to free memory object from"},{"name":"ptr","type":"void*","comment":"Previously allocated memory object"}],"argline":"pspl_malloc_context_t* context, void* ptr","sig":"pspl_malloc_context_t*::void*","return":{"type":"void"},"description":"<p>Free memory object from within context</p>\n","comments":"","group":"malloc"},"pspl_hash_cmp":{"type":"function","file":"PSPL.h","line":120,"lineto":122,"args":[{"name":"a","type":"const pspl_hash*","comment":"First Hash"},{"name":"b","type":"const pspl_hash*","comment":"Second Hash"}],"argline":"const pspl_hash* a, const pspl_hash* b","sig":"const pspl_hash*::const pspl_hash*","return":{"type":"inline int","comment":"0 if identical, positive or negative otherwise"},"description":"<p>Compare the contents of two hash objects</p>\n","comments":"","group":"hash"},"pspl_hash_cpy":{"type":"function","file":"PSPL.h","line":130,"lineto":132,"args":[{"name":"dest","type":"pspl_hash*","comment":"Hash location to copy to"},{"name":"src","type":"const pspl_hash*","comment":"Hash location to copy from"}],"argline":"pspl_hash* dest, const pspl_hash* src","sig":"pspl_hash*::const pspl_hash*","return":{"type":"inline void"},"description":"<p>Copy hash to another location in memory</p>\n","comments":"","group":"hash"},"pspl_hash_fmt":{"type":"function","file":"PSPL.h","line":145,"lineto":145,"args":[{"name":"out","type":"char*","comment":"String-buffer to fill (allocated to length of `PSPL_HASH_STRING_LEN`)"},{"name":"hash","type":"const pspl_hash*","comment":"Hash object to be read"}],"argline":"char* out, const pspl_hash* hash","sig":"char*::const pspl_hash*","return":{"type":"void"},"description":"<p>Write hash data as string</p>\n","comments":"","group":"hash"},"pspl_hash_parse":{"type":"function","file":"PSPL.h","line":153,"lineto":153,"args":[{"name":"out","type":"pspl_hash*","comment":"String-buffer containing hash as generated by `pspl_hash_fmt`"},{"name":"hash_str","type":"const char*"}],"argline":"pspl_hash* out, const char* hash_str","sig":"pspl_hash*::const char*","return":{"type":"void"},"description":"<p>Parse hash string as hash object</p>\n","comments":"","group":"hash"},"pspl_toolchain_provide_copyright":{"type":"function","file":"PSPLToolchainExtension.h","line":46,"lineto":48,"args":[{"name":"component_name","type":"const char*","comment":"Name of software component contained"},{"name":"copyright","type":"const char*","comment":"Copyright string of software component"},{"name":"licence","type":"const char*","comment":"Shortest-representable copy of attached licence (line-wrapped to 80 columns)"}],"argline":"const char* component_name,\n                                      const char* copyright,\n                                      const char* licence","sig":"const char*::const char*::const char*","return":{"type":"void"},"description":"<p>Provide software licencing details for extension</p>\n","comments":"<p>Call this method (within copyright hook) for each software component \ncontained in extension or platform</p>\n","group":"toolchain"},"pspl_toolchain_init_other_extension":{"type":"function","file":"PSPLToolchainExtension.h","line":104,"lineto":393,"args":[{"name":"ext_name","type":"const char*","comment":"Unique name of extension"}],"argline":"const char* ext_name","sig":"const char*","return":{"type":"int","comment":"0 if successful"},"description":"<p>Request the immediate initialisation of another extension by name\n(only valid within init hook)</p>\n","comments":"","group":"toolchain"}},"globals":{"PSPL_HASH_STRING_LEN":{"value":"41","file":"PSPL.h","line":137,"comments":"Length of string-buffer filled by `pspl_hash_fmt`"}},"types":[["pspl_extension_t",{"type":"struct","value":"pspl_extension_t","file":"PSPL.h","line":163,"lineto":174,"block":"const char* extension_name\nconst char* extension_desc\n# ifdef PSPL_TOOLCHAIN const struct _pspl_toolchain_extension* toolchain_extension\n# endif # ifdef PSPL_RUNTIME const struct _pspl_runtime_extension* runtime_extension\n# endif","tdef":"typedef","comments":"Common extension definition structure\n\nInstances of this structure are generated before compile time\nvia CMake. The structure is shared between the *Toolchain* and\n*Runtime* portions of PSPL, thereby maintaining a common extension\nnamespace.","used":{"returns":[],"needs":[]}}],["pspl_platform_t",{"type":"struct","value":"pspl_platform_t","file":"PSPL.h","line":185,"lineto":198,"block":"const char* platform_name\nconst char* platform_desc\nuint8_t byte_order\nuint8_t padding[3]\n# ifdef PSPL_TOOLCHAIN const struct _pspl_toolchain_platform* toolchain_platform\n# endif # ifdef PSPL_RUNTIME const struct _pspl_runtime_platform* runtime_platform\n# endif","tdef":"typedef","comments":"Common platform description structure\n\nInstances of this structure are generated before compile time\nvia CMake. The structure is shared between the *Toolchain* and\n*Runtime* portions of PSPL, thereby maintaining a common platform\nnamespace.","used":{"returns":[],"needs":[]}}],["pspl_toolchain_context_t",{"type":"struct","value":"pspl_toolchain_context_t","file":"PSPLToolchainExtension.h","line":61,"lineto":81,"block":"unsigned int target_runtime_platforms_c\nconst pspl_platform_t* const * target_runtime_platforms\nconst char* pspl_name\nconst char* pspl_enclosing_dir\nunsigned int def_c\nconst char** def_k\nconst char** def_v","tdef":"typedef","comments":"Toolchain driver context (data consistent from init to finish)","used":{"returns":[],"needs":[]}}]],"prefix":"include/PSPL","groups":[["PSPL",["pspl_error","pspl_warn"]],["hash",["pspl_hash_cmp","pspl_hash_cpy","pspl_hash_fmt","pspl_hash_parse"]],["malloc",["pspl_malloc_context_destroy","pspl_malloc_context_init","pspl_malloc_free","pspl_malloc_malloc"]],["toolchain",["pspl_toolchain_init_other_extension","pspl_toolchain_provide_copyright"]]]}